//========================================================================
// CharLUT.v
//========================================================================
// A lookup table to determine whether a given (visible) ASCII character
// should be displayed
//
// This CharLUT uses the font <font_name>
// (generated by font_lut.py)
//
// We assume 8x8 characters, and output whether the corresponding pixel
// should be colored or not
//
//       01234567  hidx
//      ,--------.
//   0  |  XX    |
//   1  | XXXX   |
//   2  |XX  XX  |
//   3  |XX  XX  |
//   4  |XXXXXX  |
//   5  |XX  XX  |
//   6  |XX  XX  |
//   7  |        |
// vidx `--------' 
//
// Note that currently, only characters 32 (space) - 126 (~) are supported

`ifndef HW_CHARLUT_V
`define HW_CHARLUT_V

module CharLUT (
  input  logic [7:0] ascii_char,
  input  logic [3:0] vidx,
  input  logic [2:0] hidx,
  output logic       lit
);

  //----------------------------------------------------------------------
  // Look-up table to determine character
  //----------------------------------------------------------------------
  // Each character is encoded in a row-major format
  //
  // Encodings sourced from https://github.com/dhepper/font8x8

  logic [127:0] char_pix;

  always_comb begin
    case( ascii_char )
<font_lookup>
      default: char_pix = { 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00, 8'h00 };
    endcase
  end

  //----------------------------------------------------------------------
  // Assign output based on appropriate pixel value
  //----------------------------------------------------------------------

  logic [7:0] char_pix_row;

  always_comb begin
    case( vidx )
      'h0:     char_pix_row = char_pix[127:120];
      'h1:     char_pix_row = char_pix[119:112];
      'h2:     char_pix_row = char_pix[111:104];
      'h3:     char_pix_row = char_pix[103: 96];
      'h4:     char_pix_row = char_pix[ 95: 88];
      'h5:     char_pix_row = char_pix[ 87: 80];
      'h6:     char_pix_row = char_pix[ 79: 72];
      'h7:     char_pix_row = char_pix[ 71: 64];
      'h8:     char_pix_row = char_pix[ 63: 56];
      'h9:     char_pix_row = char_pix[ 55: 48];
      'hA:     char_pix_row = char_pix[ 47: 40];
      'hB:     char_pix_row = char_pix[ 39: 32];
      'hC:     char_pix_row = char_pix[ 31: 24];
      'hD:     char_pix_row = char_pix[ 23: 16];
      'hE:     char_pix_row = char_pix[ 15:  8];
      'hF:     char_pix_row = char_pix[  7:  0];
      default: char_pix_row = 'h0;
    endcase
  end

  assign lit = char_pix_row[hidx];

endmodule

`endif // HW_CHARLUT_V
